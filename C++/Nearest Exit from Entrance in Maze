#include<bits/stdc++.h>
using namespace std;
class Solution {
public:
    int nearestExit(vector<vector<char>>& maze, vector<int>& ent) {
        queue<pair<int,int>>q;
        q.push({ent[0],ent[1]});//push the entrance coordinates
        
        int s=1;
        int r=maze.size();
        int c=maze[0].size();
        
        vector<vector<int>>dir={{0,1},{1,0},{0,-1},{-1,0}};//surrounding cells(4 directions)
        
        maze[ent[0]][ent[1]]='+';//mark it visited
        while(!q.empty()){
            int sz=q.size();
            while(sz--){
                auto f=q.front();
                q.pop();
                for(int i=0;i<4;i++){
                int x=f.first+dir[i][0];
                int y=f.second+dir[i][1];
                
                if(x<0||y<0||y>=c||x>=r||maze[x][y]=='+')//if not in boundary or visited already,continue
                    continue;
                if(x==0||y==0||x==r-1||y==c-1)//reached exit
                    return s;
                maze[x][y]='+';//mark visited
                q.push({x,y});//push the surroundings
            
                }
            }
            s++;//increment the steps needed
            
        }
        return -1;
        
    }
};
